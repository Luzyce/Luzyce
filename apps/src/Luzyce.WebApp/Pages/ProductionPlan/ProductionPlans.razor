@page "/productionPlan"
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject IJSRuntime Js

<style>
    .legend {
        border: 1px solid #ddd;
        padding: 15px;
        margin: 15px 0;
        background-color: #f9f9f9;
    }

    .legend h3 {
        margin-top: 0;
    }

    .legend ul {
        list-style-type: none;
        padding: 0;
    }

    .legend li {
        padding: 5px 0;
    }

    .legend strong {
        font-weight: bold;
    }
</style>

<ProductionPlansCalendar @ref="productionPlansCalendar" OnItemClick="HandleItemClick" OnMonthChanged="UpdateMaxDaysInMonth"/>

<div class="row">
    <div class="col">
        <h6>Wydrukuj Plan Produkcji:</h6>
        <div class="input-group" style="width: 30%">
            <span class="input-group-text">D:</span>
            <input type="number" class="form-control" min="1" max="@MaxDaysInMonth"
                   @bind-value="ProductionDay" @bind-value:event="oninput" @onchange="e => OnProdPlanDayChanged(e.Value)">
            <button class="btn btn-outline-secondary" type="button" id="printProdPlan"
                    @onclick="PrintProductionPlan" disabled="@isProductionPlanPrintDisabled">Wydrukuj</button>
        </div>
        <br>
        <h6>Wydrukuj Raport Produkcji:</h6>
        <div class="input-group" style="width: 38%">
            <span class="input-group-text">D:</span>
            <input type="number" class="form-control" min="1" max="@MaxDaysInMonth"
                   @bind-value="ReportDay" @bind-value:event="oninput" @onchange="e => OnPlanRepDayChanged(e.Value)">
            <span class="input-group-text">Z:</span>
            <input type="number" class="form-control" min="1" max="3"
                   @bind-value="ReportShift" @bind-value:event="oninput" @onchange="e => OnPlanRepShiftChanged(e.Value)">
            <button class="btn btn-outline-secondary" type="button" id="printProdReport"
                    @onclick="PrintProductionRep" disabled="@isProdRepPrintDisabled">Wydrukuj</button>
        </div>
    </div>
    <div class="col">
        <div class="legend" style="float: right">
            <h3>Legenda</h3>
            <ul>
                <li><strong>Kolumna</strong>: Zmiana</li>
                <li><strong>Wiersz</strong>: Zespół</li>
                <li><strong>D</strong> - Dzień</li>
                <li><strong>Z</strong> - Zmiana</li>
            </ul>
        </div>
    </div>
</div>


@code {
    private ProductionPlansCalendar productionPlansCalendar = new();
    private int? ProductionDay { get; set; }
    private int? ReportDay { get; set; }
    private int? ReportShift { get; set; }
    private bool isProductionPlanPrintDisabled = true;
    private bool isProdRepPrintDisabled = true;

    private int MaxDaysInMonth => DateTime.DaysInMonth(productionPlansCalendar.CurrentDate.Year, productionPlansCalendar.CurrentDate.Month);

    private void UpdateMaxDaysInMonth()
    {
        isProductionPlanPrintDisabled = true;
        isProdRepPrintDisabled = true;
        ReportDay = null;
        ReportShift = null;
        ProductionDay = null;
        
        StateHasChanged();
    }

    private void HandleItemClick((DateOnly date, int shift, int team) item)
    {
        var (date, shift, team) = item;
        Navigation.NavigateTo($"/productionPlan/edit?dateString={date.ToString("yyyy-MM-dd")}&shift={shift}&team={team}");
    }

    private async Task PrintProductionPlan()
    {
        if (ProductionDay == null)
        {
            return;
        }
        
        var selectedDate = new DateOnly(productionPlansCalendar.CurrentDate.Year, productionPlansCalendar.CurrentDate.Month, ProductionDay ?? 0).ToString("yyyy-MM-dd");

        var url = Configuration["apiUrl"] + $"/api/productionPlan/ProdPlanExcel/{selectedDate}?timestamp=1";
        await Js.InvokeVoidAsync("open", url, "_blank");
    }
    
    private async Task PrintProductionRep()
    {
        if (ReportDay == null || ReportShift == null)
        {
            return;
        }
        
        var selectedDate = new DateOnly(productionPlansCalendar.CurrentDate.Year, productionPlansCalendar.CurrentDate.Month, ReportDay ?? 0).ToString("yyyy-MM-dd");

        var url = Configuration["apiUrl"] + $"/api/productionRaport/downloadExcel/{selectedDate}/{ReportShift}?timestamp=1";
        await Js.InvokeVoidAsync("open", url, "_blank");
    }
    
    private void OnProdPlanDayChanged(object? objValue)
    {
        if (objValue == null || string.IsNullOrWhiteSpace(objValue.ToString()))
        {
            isProductionPlanPrintDisabled = true;
            return;
        }
        
        var selectedDate = new DateOnly(productionPlansCalendar.CurrentDate.Year, productionPlansCalendar.CurrentDate.Month, int.Parse((string)objValue));
        if (productionPlansCalendar.productionPlans != null)
        {
            isProductionPlanPrintDisabled = productionPlansCalendar.productionPlans.Any(p => p.Date == selectedDate && p.Status?.Id == 1);
        }
    }
    
    private void OnPlanRepDayChanged(object? objValue)
    {
        if (objValue == null || string.IsNullOrWhiteSpace(objValue.ToString()) || ReportShift == null)
        {
            isProdRepPrintDisabled = true;
            return;
        }
        
        var selectedDate = new DateOnly(productionPlansCalendar.CurrentDate.Year, productionPlansCalendar.CurrentDate.Month, int.Parse((string)objValue));
        if (productionPlansCalendar.productionPlans != null)
        {
            isProdRepPrintDisabled = productionPlansCalendar.productionPlans.Any(p => p.Date == selectedDate && p.Status?.Id == 1);
        }
    }
    
    private void OnPlanRepShiftChanged(object? objValue)
    {
        if (objValue == null || string.IsNullOrWhiteSpace(objValue.ToString()))
        {
            isProdRepPrintDisabled = true;
            return;
        }
        
        isProdRepPrintDisabled = false;
    }
}
