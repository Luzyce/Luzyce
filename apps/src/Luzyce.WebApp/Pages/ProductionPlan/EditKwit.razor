@page "/productionPlan/editKwit"
@using System.Globalization
@using Luzyce.Shared.Models.DocumentDependencyChart
@using Luzyce.Shared.Models.Kwit
@using Luzyce.WebApp.Services
@inject NavigationManager NavManager
@inject ProductionPlanService ProductionPlanService

@if (kwit == null)
{
    <Loader />
    return;
}

<style>
    .table tbody tr:last-child {
        border-top: 2px solid #000;
    }
</style>

<h3>Edycja Kwitu: @kwit.Number</h3>
<h4>Data: @DateStringPressed Zmiana: @Shift Zespół: @Team</h4>
<h5>Ilość na Planie Produkcji: @kwit.Quantity</h5>

<div class="row">
    <div class="col form-group">
        <label>Ilość Netto:</label>
        <input type="number" class="form-control" id="quantityNetto" @bind="kwit.QuantityNetto" readonly="@(isReadonly || isLocked)">
    </div>
    <div class="col form-group">
        <label>Ilość Do Sprawdzenia:</label>
        <input type="number" class="form-control" id="quantityToImprove" @bind="kwit.QuantityToImprove" readonly="@(isReadonly || isLocked)">
    </div>
    <div class="col form-group">
        <label>Braki:</label>
        <input type="number" class="form-control" id="quantityLoss" @bind="newLossQuantity" readonly="readonly">
    </div>
</div>

@if (isLocked)
{
    <br>
    <div class="alert alert-warning">
        Kwit jest zablokowany przez: @kwit.LockedBy?.Name (@kwit.LockedBy?.IpAddress)
        <button style="float: right" class="btn btn-primary" @onclick="UnlockKwit">Odblokuj Kwit</button>
    </div>
}

<br>

<a type="button" class="btn btn-primary" href="/productionPlan/edit?dateString=@DateString&shift=@Shift&team=@Team">Powrót</a>

<div style="float: right">
    <a type="button" class="btn btn-primary" @onclick="() => ShowDependencyChart(kwit.Id)">Wykres zależności</a>
    <button class="btn btn-primary" style="margin-right: 10px;" @onclick="UpdateKwit" disabled="@(isReadonly || isLocked)">Zapisz</button>
    @if (!isReadonly)
    {
        <button class="btn btn-danger" @onclick="CloseKwit" disabled="@isLocked">Zamknij Kwit</button>
    }
    else
    {
        <button class="btn btn-warning" @onclick="RevertKwit">Przywróć Kwit</button>
    }
</div>

<br>
<br>
<table class="table table-bordered" style="max-width: 500px;">
    <thead>
    <tr>
        <th>Braki</th>
        <th>Ilość</th>
        <th>Akcje</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var lack in updatedLacks)
    {
        <tr>
            <td>@lack.ErrorName (@lack.ErrorCode)</td>
            <td>
                <input type="number" class="form-control" @bind="lack.Quantity" min="0" @bind:after="UpdateNewLossQuantity" readonly="@(isReadonly || isLocked)">
            </td>
            <td>
                <button class="btn btn-danger" @onclick="() => RemoveLack(lack)" disabled="@(isReadonly || isLocked)">Usuń</button>
            </td>
        </tr>
    }
    <tr>
        <td>
            <select class="form-select" @bind="selectedErrorCode">
                <option selected>Wybierz brak</option>
                @foreach (var lack in kwit.Lacks.Where(lack => lack.Quantity == 0))
                {
                    <option value="@lack.ErrorCode">@lack.ErrorName (@lack.ErrorCode)</option>
                }
            </select>
        </td>
        <td>
            <input type="number" class="form-control" min="1" @bind="newLackQuantity">
        </td>
        <td>
            <button class="btn btn-success" @onclick="AddLack">Dodaj</button>
        </td>
    </tr>
    </tbody>
</table>

@if (request != null)
{
    <DocumentDependencyChart Request="@request"/>
}

@code {
    [Parameter] [SupplyParameterFromQuery] public required string DateString { get; set; }

    [Parameter] [SupplyParameterFromQuery] public int Shift { get; set; }

    [Parameter] [SupplyParameterFromQuery] public int Team { get; set; }

    [Parameter] [SupplyParameterFromQuery] public int KwitId { get; set; }

    GetKwit? kwit;
    private bool isReadonly;
    private bool isLocked;
    private GetDocumentDependencyChartRequest? request;
    private DateOnly Date => DateOnly.ParseExact(DateString, "yyyy-MM-dd");
    private string DateStringPressed => Date.ToString("d", new CultureInfo("pl-PL"));
    private List<GetLacks> updatedLacks = [];
    private string? selectedErrorCode;
    private int newLackQuantity = 1;
    private int newLossQuantity = 1;

    protected override async Task OnInitializedAsync()
    {
        if (KwitId < 1)
        {
            NavManager.NavigateTo("/productionPlan");
            return;
        }

        kwit = await ProductionPlanService.GetKwit(KwitId);

        updatedLacks = kwit is { Lacks: not null } ? kwit.Lacks.Where(lack => lack.Quantity != 0).ToList() : [];
        newLossQuantity = kwit?.QuantityLoss ?? 0;

        if (kwit?.Status?.Name == "Zamknięty")
        {
            isReadonly = true;
        }

        if (kwit?.LockedBy != null)
        {
            isLocked = true;
        }
    }

    private async Task RevertKwit()
    {
        await ProductionPlanService.RevertKwit(KwitId);
        isReadonly = false;
    }

    private async Task CloseKwit()
    {
        await ProductionPlanService.CloseKwit(KwitId);
        isReadonly = true;
    }

    private async Task UnlockKwit()
    {
        await ProductionPlanService.UnlockKwit(KwitId);
        isLocked = false;
    }

    private async Task UpdateKwit()
    {
        if (kwit == null)
        {
            return;
        }

        await ProductionPlanService.UpdateKwit(new UpdateKwit
        {
            Id = kwit.Id,
            QuantityNetto = kwit.QuantityNetto,
            QuantityToImprove = kwit.QuantityToImprove,
            QuantityLoss = newLossQuantity,
            Lacks = updatedLacks
        });
        NavManager.NavigateTo($"/productionPlan/edit?dateString={DateString}&shift={Shift}&team={Team}");
    }

    private Task ShowDependencyChart(int kwitId)
    {
        request = new GetDocumentDependencyChartRequest
        {
            DocumentId = kwitId,
            DocumentType = "Kwit"
        };
        return Task.CompletedTask;
    }

    private void AddLack()
    {
        if (selectedErrorCode == null || newLackQuantity < 1) return;

        var lack = kwit?.Lacks.FirstOrDefault(l => l.ErrorCode == selectedErrorCode);
        
        if (lack == null)
        {
            return;
        }

        lack.Quantity = newLackQuantity;
        updatedLacks.Add(lack);
        newLackQuantity = 1;
        newLossQuantity = updatedLacks.Sum(l => l.Quantity) ?? 0;
        
        updatedLacks = updatedLacks.OrderBy(l => l.ErrorCode).ToList();
        
        selectedErrorCode = null;
        
        StateHasChanged();
    }

    private void RemoveLack(GetLacks lack)
    {
        updatedLacks.Remove(lack);
        newLossQuantity = updatedLacks.Sum(l => l.Quantity) ?? 0;
        StateHasChanged();
    }
    
    private void UpdateNewLossQuantity()
    {
        newLossQuantity = updatedLacks.Sum(l => l.Quantity) ?? 0;
    }
}
